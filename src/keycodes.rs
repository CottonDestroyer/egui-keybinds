use std::collections::HashMap;

use once_cell::sync::Lazy;

#[allow(dead_code)]
#[derive(PartialEq, Clone, Hash, Eq, Debug)]
pub enum KeyCode {
    Escape,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    Backtick,
    Tilde,
    Num1,
    ExclamationPoint,
    Num2,
    At,
    Num3,
    Hashtag,
    Num4,
    Dollar,
    Num5,
    Percent,
    Num6,
    Caret,
    Num7,
    Ampersand,
    Num8,
    Asterisks,
    Num9,
    OpenParenthesis,
    Num0,
    CloseParenthesis,
    Minus,
    Underscore,
    Equals,
    Plus,
    Backspace,
    Tab,
    Q,
    W,
    E,
    R,
    T,
    Y,
    U,
    I,
    O,
    P,
    OpenBracket,
    OpenBrace,
    CloseBracket,
    CloseBrace,
    Backslash,
    Pipe,
    CapsLock,
    A,
    S,
    D,
    F,
    G,
    H,
    J,
    K,
    L,
    SemiColon,
    Colon,
    Apostrophe,
    Quote,
    Return,
    LShift,
    Z,
    X,
    C,
    V,
    B,
    N,
    M,
    Comma,
    LessThan,
    Period,
    GreaterThan,
    ForwardSlash,
    QuestionMark,
    RShift,
    LFunction,
    LControl,
    LOption,
    LWindows,
    LCommand,
    Space,
    RAlt,
    LAlt,
    RCommand,
    RWindows,
    ROption,
    RFunction,
    RControl,

    Insert,
    Delete,
    Home,
    End,
    PageUp,
    PageDown,

    UpArrow,
    DownArrow,
    LeftArrow,
    RightArrow,
}

static KEY_STRING_MAP: Lazy<HashMap<KeyCode, &str>> = Lazy::new(|| {
    HashMap::from([
        (KeyCode::Escape, "Escape"),
        (KeyCode::F1, "F1"),
        (KeyCode::F2, "F2"),
        (KeyCode::F3, "F3"),
        (KeyCode::F4, "F4"),
        (KeyCode::F5, "F5"),
        (KeyCode::F6, "F6"),
        (KeyCode::F7, "F7"),
        (KeyCode::F8, "F8"),
        (KeyCode::F9, "F9"),
        (KeyCode::F10, "F10"),
        (KeyCode::F11, "F11"),
        (KeyCode::F12, "F12"),
        (KeyCode::Backtick, "`"),
        (KeyCode::Tilde, "~"),
        (KeyCode::Num1, "1"),
        (KeyCode::ExclamationPoint, "!"),
        (KeyCode::Num2, "2"),
        (KeyCode::At, "@"),
        (KeyCode::Num3, "3"),
        (KeyCode::Hashtag, "#"),
        (KeyCode::Num4, "4"),
        (KeyCode::Dollar, "$"),
        (KeyCode::Num5, "5"),
        (KeyCode::Percent, "%"),
        (KeyCode::Num6, "6"),
        (KeyCode::Caret, "^"),
        (KeyCode::Num7, "7"),
        (KeyCode::Ampersand, "&"),
        (KeyCode::Num8, "8"),
        (KeyCode::Asterisks, "*"),
        (KeyCode::Num9, "9"),
        (KeyCode::OpenParenthesis, "("),
        (KeyCode::Num0, "0"),
        (KeyCode::CloseParenthesis, ")"),
        (KeyCode::Minus, "-"),
        (KeyCode::Underscore, "_"),
        (KeyCode::Equals, "="),
        (KeyCode::Plus, "+"),
        (KeyCode::Backspace, "Backspace"),
        (KeyCode::Tab, "Tab"),
        (KeyCode::Q, "Q"),
        (KeyCode::W, "W"),
        (KeyCode::E, "E"),
        (KeyCode::R, "R"),
        (KeyCode::T, "T"),
        (KeyCode::Y, "Y"),
        (KeyCode::U, "U"),
        (KeyCode::I, "I"),
        (KeyCode::O, "O"),
        (KeyCode::P, "P"),
        (KeyCode::OpenBracket, "["),
        (KeyCode::OpenBrace, "{"),
        (KeyCode::CloseBracket, "]"),
        (KeyCode::CloseBrace, "}"),
        (KeyCode::Backslash, "\\"),
        (KeyCode::Pipe, "|"),
        (KeyCode::CapsLock, "CapsLock"),
        (KeyCode::A, "A"),
        (KeyCode::S, "S"),
        (KeyCode::D, "D"),
        (KeyCode::F, "F"),
        (KeyCode::G, "G"),
        (KeyCode::H, "H"),
        (KeyCode::J, "J"),
        (KeyCode::K, "K"),
        (KeyCode::L, "L"),
        (KeyCode::SemiColon, ";"),
        (KeyCode::Colon, ":"),
        (KeyCode::Apostrophe, "'"),
        (KeyCode::Quote, "\""),
        (KeyCode::Return, "Return"),
        (KeyCode::LShift, "LShift"),
        (KeyCode::Z, "Z"),
        (KeyCode::X, "X"),
        (KeyCode::C, "C"),
        (KeyCode::V, "V"),
        (KeyCode::B, "B"),
        (KeyCode::N, "N"),
        (KeyCode::M, "M"),
        (KeyCode::Comma, "),"),
        (KeyCode::LessThan, "<"),
        (KeyCode::Period, "."),
        (KeyCode::GreaterThan, ">"),
        (KeyCode::ForwardSlash, "/"),
        (KeyCode::QuestionMark, "?"),
        (KeyCode::RShift, "RShift"),
        (KeyCode::LFunction, "LFunction"),
        (KeyCode::LControl, "LControl"),
        (KeyCode::LOption, "LOption"),
        (KeyCode::LWindows, "LWindows"),
        (KeyCode::LCommand, "LCommand"),
        (KeyCode::Space, "Space"),
        (KeyCode::RAlt, "RAlt"),
        (KeyCode::LAlt, "LAlt"),
        (KeyCode::RCommand, "RCommand"),
        (KeyCode::RWindows, "RWindows"),
        (KeyCode::ROption, "ROption"),
        (KeyCode::RFunction, "RFunction"),
        (KeyCode::RControl, "RControl"),
        (KeyCode::Insert, "Insert"),
        (KeyCode::Delete, "Delete"),
        (KeyCode::Home, "Home"),
        (KeyCode::End, "End"),
        (KeyCode::PageUp, "PageUp"),
        (KeyCode::PageDown, "PageDown"),
        (KeyCode::UpArrow, "UpArrow"),
        (KeyCode::DownArrow, "DownArrow"),
        (KeyCode::LeftArrow, "LeftArrow"),
        (KeyCode::RightArrow, "RightArrow"),
    ])
});

impl KeyCode {
    pub fn serialize(&self) -> String {
        KEY_STRING_MAP[self].to_string()
    }

    pub fn deserialize(data: String) -> Result<Option<Self>, ()> {
        let mut result: Result<Option<Self>, ()> = Err(());

        if data == "..." {
            return Ok(None);
        }

        for (key, str) in KEY_STRING_MAP.iter() {
            if str.eq_ignore_ascii_case(data.as_str()) {
                result = Ok(Some(key.clone()));
                break;
            }
        }

        result
    }
}

impl From<device_query::Keycode> for KeyCode {
    fn from(item: device_query::Keycode) -> KeyCode {
        match item {
            device_query::Keycode::Key0 => KeyCode::Num0,
            device_query::Keycode::Key1 => KeyCode::Num1,
            device_query::Keycode::Key2 => KeyCode::Num2,
            device_query::Keycode::Key3 => KeyCode::Num3,
            device_query::Keycode::Key4 => KeyCode::Num4,
            device_query::Keycode::Key5 => KeyCode::Num5,
            device_query::Keycode::Key6 => KeyCode::Num6,
            device_query::Keycode::Key7 => KeyCode::Num7,
            device_query::Keycode::Key8 => KeyCode::Num8,
            device_query::Keycode::Key9 => KeyCode::Num9,
            device_query::Keycode::A => KeyCode::A,
            device_query::Keycode::B => KeyCode::B,
            device_query::Keycode::C => KeyCode::C,
            device_query::Keycode::D => KeyCode::D,
            device_query::Keycode::E => KeyCode::E,
            device_query::Keycode::F => KeyCode::F,
            device_query::Keycode::G => KeyCode::G,
            device_query::Keycode::H => KeyCode::H,
            device_query::Keycode::I => KeyCode::I,
            device_query::Keycode::J => KeyCode::J,
            device_query::Keycode::K => KeyCode::K,
            device_query::Keycode::L => KeyCode::L,
            device_query::Keycode::M => KeyCode::M,
            device_query::Keycode::N => KeyCode::N,
            device_query::Keycode::O => KeyCode::O,
            device_query::Keycode::P => KeyCode::P,
            device_query::Keycode::Q => KeyCode::Q,
            device_query::Keycode::R => KeyCode::R,
            device_query::Keycode::S => KeyCode::S,
            device_query::Keycode::T => KeyCode::T,
            device_query::Keycode::U => KeyCode::U,
            device_query::Keycode::V => KeyCode::V,
            device_query::Keycode::W => KeyCode::W,
            device_query::Keycode::X => KeyCode::X,
            device_query::Keycode::Y => KeyCode::Y,
            device_query::Keycode::Z => KeyCode::Z,
            device_query::Keycode::F1 => KeyCode::F1,
            device_query::Keycode::F2 => KeyCode::F2,
            device_query::Keycode::F3 => KeyCode::F3,
            device_query::Keycode::F4 => KeyCode::F4,
            device_query::Keycode::F5 => KeyCode::F5,
            device_query::Keycode::F6 => KeyCode::F6,
            device_query::Keycode::F7 => KeyCode::F7,
            device_query::Keycode::F8 => KeyCode::F8,
            device_query::Keycode::F9 => KeyCode::F9,
            device_query::Keycode::F10 => KeyCode::F10,
            device_query::Keycode::F11 => KeyCode::F11,
            device_query::Keycode::F12 => KeyCode::F12,
            device_query::Keycode::Escape => KeyCode::Escape,
            device_query::Keycode::Space => KeyCode::Space,
            device_query::Keycode::LControl => KeyCode::LControl,
            device_query::Keycode::RControl => KeyCode::RControl,
            device_query::Keycode::LShift => KeyCode::LShift,
            device_query::Keycode::RShift => KeyCode::RShift,
            device_query::Keycode::LAlt => KeyCode::LAlt,
            device_query::Keycode::RAlt => KeyCode::RAlt,
            device_query::Keycode::Meta => KeyCode::LWindows, // rip
            device_query::Keycode::Enter => KeyCode::Return,
            device_query::Keycode::Up => KeyCode::UpArrow,
            device_query::Keycode::Down => KeyCode::DownArrow,
            device_query::Keycode::Left => KeyCode::LeftArrow,
            device_query::Keycode::Right => KeyCode::RightArrow,
            device_query::Keycode::Backspace => KeyCode::Backspace,
            device_query::Keycode::CapsLock => KeyCode::CapsLock,
            device_query::Keycode::Tab => KeyCode::Tab,
            device_query::Keycode::Home => KeyCode::Home,
            device_query::Keycode::End => KeyCode::End,
            device_query::Keycode::PageUp => KeyCode::PageUp,
            device_query::Keycode::PageDown => KeyCode::PageDown,
            device_query::Keycode::Insert => KeyCode::Insert,
            device_query::Keycode::Delete => KeyCode::Delete,
            device_query::Keycode::Numpad0 => KeyCode::Num0,
            device_query::Keycode::Numpad1 => KeyCode::Num1,
            device_query::Keycode::Numpad2 => KeyCode::Num2,
            device_query::Keycode::Numpad3 => KeyCode::Num3,
            device_query::Keycode::Numpad4 => KeyCode::Num4,
            device_query::Keycode::Numpad5 => KeyCode::Num5,
            device_query::Keycode::Numpad6 => KeyCode::Num6,
            device_query::Keycode::Numpad7 => KeyCode::Num7,
            device_query::Keycode::Numpad8 => KeyCode::Num8,
            device_query::Keycode::Numpad9 => KeyCode::Num9,
            device_query::Keycode::NumpadSubtract => KeyCode::Minus,
            device_query::Keycode::NumpadAdd => KeyCode::Plus,
            device_query::Keycode::NumpadDivide => KeyCode::ForwardSlash,
            device_query::Keycode::NumpadMultiply => KeyCode::Asterisks,
            device_query::Keycode::Grave => KeyCode::Backtick,
            device_query::Keycode::Minus => KeyCode::Minus,
            device_query::Keycode::Equal => KeyCode::Equals,
            device_query::Keycode::LeftBracket => KeyCode::OpenBracket,
            device_query::Keycode::RightBracket => KeyCode::CloseBracket,
            device_query::Keycode::BackSlash => KeyCode::Backslash,
            device_query::Keycode::Semicolon => KeyCode::SemiColon,
            device_query::Keycode::Apostrophe => KeyCode::Apostrophe,
            device_query::Keycode::Comma => KeyCode::Comma,
            device_query::Keycode::Dot => KeyCode::Period,
            device_query::Keycode::Slash => KeyCode::ForwardSlash,
        }
    }
}

impl KeyCode {
    pub fn as_modifier(&self) -> Option<KeyModifier> {
        match self {
            KeyCode::LControl => Some(KeyModifier::CtrlCmd),
            KeyCode::RControl => Some(KeyModifier::CtrlCmd),
            KeyCode::RAlt => Some(KeyModifier::AltOpt),
            KeyCode::LAlt => Some(KeyModifier::AltOpt),
            KeyCode::LOption => Some(KeyModifier::AltOpt),
            KeyCode::ROption => Some(KeyModifier::AltOpt),
            KeyCode::LCommand => Some(KeyModifier::CtrlCmd),
            KeyCode::RCommand => Some(KeyModifier::CtrlCmd),
            KeyCode::LWindows => Some(KeyModifier::CtrlCmd),
            KeyCode::RWindows => Some(KeyModifier::CtrlCmd),
            KeyCode::LFunction => Some(KeyModifier::Function),
            KeyCode::RFunction => Some(KeyModifier::Function),
            KeyCode::LShift => Some(KeyModifier::Shift),
            KeyCode::RShift => Some(KeyModifier::Shift),
            _ => None,
        }
    }
}

// include discriminant and Ord for Vec<KeyModifier>.sort(), should end up as: Control, Alt, Shift, Fn
#[derive(PartialEq, Clone, PartialOrd, Eq, Ord, Hash, Debug)]
pub enum KeyModifier {
    CtrlCmd = 1,  // Control, Left or Right + Command, Left or Right
    AltOpt = 2,   // Alt on windows, Option on MacOS
    Shift = 3,    // Shift, Left or Right
    Function = 4, // Function key (windows only?)
}

impl KeyModifier {
    pub fn serialize(&self) -> char {
        match self {
            KeyModifier::CtrlCmd => '^',
            KeyModifier::Shift => '_',
            KeyModifier::AltOpt => '*',
            KeyModifier::Function => '~',
        }
    }

    pub fn deserialize(data: char) -> Result<Self, ()> {
        match data {
            '^' => Ok(KeyModifier::CtrlCmd),
            '_' => Ok(KeyModifier::Shift),
            '*' => Ok(KeyModifier::AltOpt),
            '~' => Ok(KeyModifier::Function),
            _ => Err(()),
        }
    }
}
